from py2tex import Document, Table
import numpy as np

doc = Document('Comick_table', doc_type='article', filepath='.', options=('10pt',))

n_languages = 23
n_rows = n_languages + 2

n_tasks = 2
n_models = 3
n_cols = n_tasks * n_models + 1

table = doc.new(Table(shape=(n_rows, n_cols), float_format='.2f'))
table.caption = "us VS them"

### Ici est l'endroit où on met les vrais résultats. Tu peux faire des slices différentes avec une boucle for si c'est pas dans un gros numpy array
dummy_data = np.random.rand(n_languages, n_tasks*n_models)

pos_data = """79.03993988	82.09876251	82.09876251220703
82.92046356	86.66093063	89.58061981201172
89.31977081	90.09206581	91.2637996673584
88.24430302	88.90108054	90.36854444231305
93.65546926	94.38464864	94.56607818603516
93.35256141	94.2382322	95.61333847045898
97.65939903	98.1129303	98.29764366149902
97.93044535	98.23765098	98.55653635660808
96.334729	97.12365532	97.65932540893554
93.79890468	94.55925935	95.47885736925849
95.68625736	96.62819195	96.79711627960205
95.7772611	96.32789739	96.78338623046875
93.03076511	93.46057722	93.54462348090277
92.48313332	92.83579063	92.88852500915527
96.74218216	96.98924866	97.29186935424805
95.66993427	96.04122925	96.2775
96.55020342	97.16500051	97.39572264018811
94.43669013	94.83850259	95.2704409974994
96.12512762	96.33505249	96.64452639493075
96.29913217	96.56465771	96.7508
97.4767313	97.68402863	97.9474
94.69199066	94.90881958	95.1026
98.39009032	98.53761896	98.7273"""

morph_data = """0.6075268817	0.6451612903	0.6451612903225806
0.8792703664	0.9012212088	0.9140516308548462
0.8336376329	0.8474922135	0.8814305659972076
-	-	-
0.9074754902	0.8933823529	0.9031862745098039
0.941132452	0.9436268396	0.9536875363764863
0.9650190623	0.9703698749	0.9751856063139589
0.9728622897	0.97592079	0.9798346336279514
0.9578709191	0.9684301261	0.9729770498868656
0.925830167	0.9349131051	0.9435688751995324
0.9267857143	0.9351708075	0.9479037267080745
0.9543096387	0.962956221	0.9685082370073723
-	-	-
0.8820403826	0.8788522848	0.8714133900106269
0.9620902988	0.9670264578	0.9695932604975648
0.9497361844	0.9511246876	0.9575673424048875
0.9753051338	0.9791074666	0.9809477416037455
0.9631800014	0.9650430188	0.9700562292527607
0.9613355419	0.9610134658	0.9675623447133523
0.9657220315	0.9681502575	0.9699543610547667
0.9822927879	0.98401507	0.9878363832077502
0.9718914121	0.9710037725	0.973444781418744
0.9708419023	0.9729764555	0.9784476254579795"""

pos_oov_data = """0.5679012346	0.8024691358	0.7160493827160493
0.6213017751	0.8224852071	0.8402366863905325
0.6138392857	0.7165178571	0.7767857142857143
0.7574750831	0.7790697674	0.813953488372093
0.7760141093	0.860670194	0.9029982363315696
0.806372549	0.8831699346	0.9142156862745098
0.8517350158	0.9022082019	0.9337539432176656
0.8922155689	0.9288090486	0.9467731204258151
0.8776775648	0.9413754228	0.9627959413754228
0.7432483834	0.8269303918	0.8687713959680486
0.8619139371	0.9132947977	0.9197174052665382
0.7761506276	0.8556485356	0.8786610878661087
0.8615819209	0.9110169492	0.905367231638418
0.8822216712	0.8916439375	0.8884205306223655
0.7009345794	0.7975077882	0.8535825545171339
0.86900369	0.9049815498	0.915129151291513
0.8590797042	0.9083812654	0.9153656532456861
0.7285714286	0.7993197279	0.817687074829932
0.8420758929	0.890625	0.8934151785714286
0.8239247312	0.8884408602	0.8924731182795699
0.9275362319	0.9594202899	0.9579710144927536
0.7702349869	0.8093994778	0.8302872062663186
0.9385781782	0.9516536644	0.9594000659268213"""

morph_oov_data = """0.3559322034	0.4745762712	0.5084745762711864
0.7034649476	0.8074133763	0.8686543110394843
0.6166263115	0.6779661017	0.8071025020177562
-	-	-
0.796596755	0.8523941433	0.889592402057776
0.8980775605	0.9197878687	0.9439840901557839
0.8363892807	0.9196050776	0.9308885754583921
0.9148837209	0.9420155039	0.9544186046511627
0.8673656182	0.9244466633	0.9475786320519222
0.7950217173	0.8533244237	0.8768793852322085
0.7989711934	0.8609053498	0.8777777777777779
0.7298624754	0.8310412574	0.862475442043222
-	-	-
0.8909090909	0.8727272727	0.8363636363636363
0.6144278607	0.7835820896	0.8532338308457711
0.8822727273	0.9222727273	0.9404545454545454
0.9080033497	0.9450891255	0.9465247039119512
0.8243137255	0.8737254902	0.8980392156862745
0.7905890805	0.8448275862	0.9008620689655172
0.893301719	0.9407231772	0.9405255878284924
0.9280245023	0.9647779479	0.9762633996937213
0.7182835821	0.7817164179	0.755597014925373
0.919315942	0.940173913	0.9520347826086957"""

languages_data = """kk
ta
lv
vi
hu
tr
el
bg
sv
eu
ru
da
id
zh
fa
he
ro
en
ar
hi
it
es
cs"""

pos_values = [[float(value) if value is not '-' else '-' for value in line.strip().split("\t") ] for line in pos_data.split("\n")]
morph_values = [[float(value)*100 if value is not '-' else '-' for value in line.strip().split("\t") ] for line in morph_data.split("\n")]

all_values = list()
for line1, line2 in zip(pos_values, morph_values):
    all_values.append(line1 + line2)

languages_values = [l.strip() for l in languages_data.split("\n")]

table[2:,1:] = all_values
### 

# languages = ['fr', 'en', 'es', 'kk'] + ['??']*(n_languages - 4)
table[2:,0] = languages_values
table[0,1:n_models+1] = 'POS'
table[0,n_models+1:] = 'MORPH'

ours_plus_attention = r'\begin{tabular}{c}Ours +\\ attentions\\\end{tabular}' # Pour l'avoir sur 2 lignes
models = ['Random', 'Mimick', ours_plus_attention]
table[1,1:n_models+1] = models
table[1,1:n_models+1].add_rule(trim_right=True)
table[1,n_models+1:] = models
table[1,n_models+1:].add_rule(trim_left=True)

for i in range(2,n_rows):
    table[i, 1:4].highlight_best()
    table[i, 4:8].highlight_best()

doc.build()
